import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import yfinance as yf
import scipy.stats as norm
from datetime import datetime

# Function to calculate the volatility using Dupire's model
def dupire_volatility(data, S, T):
    t=T
    s=S
    sum_diff_squared = 0
    sum_t_squared = 0
    for i in range(len(data)):
        sum_diff_squared += (data['strike_price'][i] - s) ** 2
        sum_t_squared += (data['maturity'][i] - t) ** 2
    return (sum_diff_squared / sum_t_squared) ** 0.5

# Function to calculate the option price using Black-Scholes model
def black_scholes(S, K, r, T, vol):
    d1 = (np.log(S / K) + (r + vol ** 2 / 2) * T) / (vol * T ** 0.5)
    d2 = d1 - vol * T ** 0.5
    return S * norm.norm(0, 1).cdf(d1) - K * np.exp(-r * T) * norm.norm(0, 1).cdf(d2)

# Importer les données à partir de yfinance
today = datetime.now()
data = yf.download('TTE.PA', start="2022-01-01", end=today)

# Ajouter les données à notre dataframe
data['strike_price'] = data['Close']
data['spot_price'] = data['Close']
data['interest_rate'] = 0.02
data['maturity'] = (data.index - data.index[0]) / np.timedelta64(1, 'D')

# Calculate volatility for each maturity
volatilities = {}
for i in range(len(data)):
    maturity = data['maturity'][i]
    if maturity not in volatilities:
        volatilities[maturity] = dupire_volatility(data, data['spot_price'][i], maturity)

# Calculate option prices using Black-Scholes model
option_prices = {}
for i in range(len(data)):
    maturity = data['maturity'][i]
    strike_price = data['strike_price'][i]
    option_prices[maturity] = black_scholes(data['spot_price'][i], strike_price, data['interest_rate'][i], maturity, volatilities[maturity])

# Lisser la courbe
x = list(volatilities.keys())
y = list(volatilities.values())
z = np.polyfit(x, y, 4) # Rajouter une courbe de tendance qui lisse une courbe
f = np.poly1d(z) 
plt.plot(x, f(x), label='Smoothed Implied volatility') # Afficher la nouvelle courbe lissée 

# Plot volatility and option prices
plt.plot(list(volatilities.keys()), list(volatilities.values()), label='Implied volatility')
#plt.plot(list(option_prices.keys()), list(option_prices.values()), label='Option Price')
plt.xlabel('Maturity')
plt.ylabel('Value')
plt.legend()
plt.show()