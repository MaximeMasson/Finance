import pandas as pd
import numpy as np
import scipy.stats as norm
from scipy.optimize import minimize
import yfinance as yf
import os
from datetime import datetime
from yahoo_fin import options as op
import matplotlib.pyplot as plt
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import minimize
from scipy.interpolate import Rbf

def getData(ticker='AAPL'):
    # Check if call option data already exists as a csv file, if yes, return it
    if os.path.exists('Volatility/Local_Volatility/'+ticker+'.csv'):
        return pd.read_csv('Volatility/Local_Volatility/'+ticker+'.csv')
    # If the call option data does not exist, retrieve it and save it as a csv file
    else:
        # Get the expiration dates for the stock options
        expirationDates = op.get_expiration_dates(ticker)
        # Initialize an empty dataframe to store the call option data
        calldata = pd.DataFrame()
        # Loop over the expiration dates and retrieve call option data for each date
        for idx, i in enumerate(expirationDates[6:7]):
            calldata1 = op.get_calls(ticker, date = i)
            # Add a column to store the expiration date index
            calldata1["Expiration Date"] = idx + 1
            # Concatenate the new call option data with the existing data
            calldata = pd.concat([calldata, calldata1])
        # Get the latest stock price (Spot Price) and add it to the call option data
        today = datetime.now()
        calldata['Spot'] = yf.download(ticker, end=today)['Adj Close'][-1]
        # Save the call option data as a csv file for future use
        calldata.to_csv('Volatility/Local_Volatility/'+ticker+'.csv', index=False)
        return calldata


def blackScholes(sigma, S, K, r, T, callPrice):
  # modèle de Black-Scholes
  d1 = (np.log(S / K) + (r + 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))
  d2 = d1 - sigma * np.sqrt(T)
  call = S * norm.norm(0, 1).cdf(d1) - K * np.exp(-r * T) * norm.norm(0, 1).cdf(d2)
  return (call - callPrice) ** 2

def localVolatility(ticker='AAPL'):
  data = getData(ticker)
  
  # initialiser la volatilité à 0.3
  sigma = 0.3

  for expiration_date in data['Expiration Date'].unique():
    # sélectionner les options avec la même date d'expiration
    options = data[data['Expiration Date'] == expiration_date]
    
    # boucle sur chaque option
    strikes = []
    local_vols = []
    for i in range(options.shape[0]):
      option = options.iloc[i]
      S = option['Spot']
      K = option['Strike']
      strikes.append(K)
      r = 0.01
      T = option['Expiration Date']
      callPrice = option['Last Price']
      
      # ajuster la volatilité pour correspondre aux prix d'options du marché
      res = minimize(blackScholes, sigma, args=(S, K, r, T, callPrice))
      sigma = res.x[0]
      local_vols.append(sigma)
      
      # stocker la volatilité pour cette option
      data.loc[i, 'localVolatility'] = sigma
    
    # lisser la courbe de volatilité locale avec RBF
    rbf = Rbf(strikes, local_vols, function='multiquadric', smooth=10, epsilon=10)
    strikes_interp = np.linspace(np.min(strikes), np.max(strikes), num=500)
    local_vols_interp = rbf(strikes_interp)

    plt.plot(strikes_interp, local_vols_interp, label=f'Local Volatility (Exp. Date: {expiration_date})')
    plt.xlabel('Strike')
    plt.ylabel('Local Volatility')
  plt.title(f'Local Volatility for {ticker}')
  plt.legend()
  plt.show()
  
  return data

localVolatility()